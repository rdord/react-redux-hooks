{"version":3,"sources":["store/reducers/counterReducer.js","store/reducers/userReducer.js","store/reducers/index.js","store/types.js","store/index.js","store/actions/counterActions.js","store/actions/userActions.js","components/Counter.js","components/Users.js","App.js","serviceWorker.js","index.js"],"names":["initialState","counterValue","loading","users","error","combineReducers","counter","state","action","type","parseInt","payload","user","middlewares","logger","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","incrementCounter","number","fetchUsersRequest","Counter","useState","setNumber","useSelector","dispatch","useDispatch","onClick","value","onChange","e","target","Users","userData","useEffect","fetch","then","res","json","fetchUsersSuccess","data","catch","message","renderUsers","map","key","id","first_name","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.38b6d3f3.chunk.js","sourcesContent":["import { INCREMENT, DECREMENT } from '../types';\n\nconst initialState = { counterValue: 0 };\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case INCREMENT:\n      return { ...state, counterValue: state.counterValue + parseInt(action.payload) };\n    case DECREMENT:\n      return { ...state, counterValue: state.counterValue - 1 };\n    default:\n      return state;\n  }\n};\n","import { FETCH_USERS_REQUEST, FETCH_USERS_SUCCESS, FETCH_USERS_FAILURE } from '../types';\n\nconst initialState = { loading: false, users: [], error: '' };\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_USERS_REQUEST:\n      return { ...state, loading: true };\n    case FETCH_USERS_SUCCESS:\n      return { ...state, loading: false, users: action.payload, error: '' };\n    case FETCH_USERS_FAILURE:\n      return { ...state, loading: false, users: [], error: action.payload };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport counterReducer from './counterReducer';\nimport userReducer from './userReducer';\n\nexport default combineReducers({\n  counter: counterReducer,\n  user: userReducer\n});\n","export const INCREMENT = 'INCREMENT';\nexport const DECREMENT = 'DECREMENT';\n\nexport const FETCH_USERS_REQUEST = 'FETCH_USERS_REQUEST';\nexport const FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS';\nexport const FETCH_USERS_FAILURE = 'FETCH_USERS_FAILURE';\n","import { createStore, applyMiddleware } from 'redux';\nimport { logger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './reducers';\n\nconst middlewares = [logger, thunk];\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middlewares)));\n\nexport default store;\n","import { INCREMENT, DECREMENT } from '../types';\n\nexport const incrementCounter = (number = 1) => ({ type: INCREMENT, payload: number });\nexport const decrementCounter = () => ({ type: DECREMENT });\n","import { FETCH_USERS_REQUEST, FETCH_USERS_SUCCESS, FETCH_USERS_FAILURE } from '../types';\n\nexport const fetchUsersRequest = () => ({ type: FETCH_USERS_REQUEST });\nexport const fetchUsersSuccess = users => ({ type: FETCH_USERS_SUCCESS, payload: users });\nexport const fetchUsersFailure = error => ({ type: FETCH_USERS_FAILURE, payload: error });\n\nexport const fetchUsers = () => dispatch => {\n  dispatch(fetchUsersRequest);\n  fetch('https://reqres.in/api/users')\n    .then(res => res.json())\n    .then(users => dispatch(fetchUsersSuccess(users.data)))\n    .catch(e => dispatch(fetchUsersFailure(e.message)));\n};\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { incrementCounter, decrementCounter } from '../store/actions';\n\nconst Counter = () => {\n  const [number, setNumber] = useState(1);\n  const counter = useSelector(state => state.counter.counterValue);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      counter: {counter}\n      <br />\n      <button onClick={() => dispatch(incrementCounter())}>+</button>\n      <button onClick={() => dispatch(decrementCounter())}>-</button>\n      <br />\n      <input type='text' value={number} onChange={e => setNumber(e.target.value)} />\n      <button onClick={() => dispatch(incrementCounter(number))}>Increment by {number}</button>\n    </div>\n  );\n};\n\nexport default Counter;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchUsers } from '../store/actions';\n\nconst Users = () => {\n  const userData = useSelector(state => state.user);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchUsers());\n  }, []);\n\n  const renderUsers = userData.error ? (\n    <p>{userData.error}</p>\n  ) : (\n    <div>\n      users: {userData && userData.users && userData.users.map(user => <span key={user.id}>{user.first_name} </span>)}\n    </div>\n  );\n\n  return userData.loading ? <p>Loading...</p> : renderUsers;\n};\n\nexport default Users;\n","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport Counter from './components/Counter';\nimport Users from './components/Users';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Counter />\n      <br />\n      <Users />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}